const { createCanvas, loadImage } = require('canvas');
const axios = require('axios');
const FormData = require('form-data');
const path = require('path');
const fs = require('fs');
const hre = require("hardhat");
const { ethers } = require("ethers");

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞
function generateInviteCode() {
    const randomDigit = () => Math.floor(Math.random() * 9) + 1;
    const code = `VL888-${randomDigit()}${randomDigit()}${randomDigit()}-${randomDigit()}${randomDigit()}${randomDigit()}`;
    
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–¥–∞:");
    console.log("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:", code);
    console.log("–î–ª–∏–Ω–∞:", code.length, "—Å–∏–º–≤–æ–ª–æ–≤");
    
    return code;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function createInviteImage(code) {
    console.log("\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞...");
    
    const templatePath = path.join(__dirname, 'InviteNFT-back.png');
    const outputDir = path.join(__dirname, 'temp');
    const outputPath = path.join(outputDir, `${code}.png`);

    if (!fs.existsSync(outputDir)) {
        console.log("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...");
        fs.mkdirSync(outputDir);
    }

    const width = 1080;
    const height = 1920;
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');

    console.log("üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞...");
    const template = await loadImage(templatePath);
    ctx.drawImage(template, 0, 0, width, height);

    ctx.font = 'bold 60px Montserrat';
    ctx.fillStyle = '#FFFFFF';
    ctx.textAlign = 'center';

    const textX = width / 2;
    const textY = height - 942;

    ctx.fillText(code, textX, textY);

    const buffer = canvas.toBuffer('image/png');
    fs.writeFileSync(outputPath, buffer);

    console.log("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:", outputPath);
    return outputPath;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Pinata
async function uploadToPinata(filePath) {
    console.log("\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Pinata IPFS...");
    
    const API_KEY = 'd676bfa8664992ff8d8e';
    const API_SECRET = '222f34bde931ce2aae694cc675b912a008029b69f7d1b6176aefc120ffa104da';

    const formData = new FormData();
    const fileStream = fs.createReadStream(filePath);
    formData.append('file', fileStream);

    try {
        const response = await axios({
            method: 'post',
            url: 'https://api.pinata.cloud/pinning/pinFileToIPFS',
            data: formData,
            headers: {
                'Content-Type': `multipart/form-data; boundary=${formData.getBoundary()}`,
                'pinata_api_key': API_KEY,
                'pinata_secret_api_key': API_SECRET
            },
            maxContentLength: Infinity,
            maxBodyLength: Infinity
        });

        console.log("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ IPFS");
        console.log("IPFS Hash:", response.data.IpfsHash);
        return `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Pinata:", error.response?.data || error.message);
        throw error;
    }
}

async function main() {
    console.log("\nüöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –≤ —Å–µ—Ç–∏ Amoy");
    console.log("–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:", new Date().toISOString());

    try {
        const [deployer] = await hre.ethers.getSigners();
        console.log("\nüë§ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç:", deployer.address);

        const contractAddress = process.env.AMOY_INVITE_CONTRACT;
        if (!contractAddress) {
            throw new Error("–ù–µ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ AMOY_INVITE_CONTRACT");
        }

        const InviteNFT = await hre.ethers.getContractFactory("Estonians888InviteNFT");
        const inviteNFT = InviteNFT.attach(contractAddress);
        console.log("üìÑ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:", inviteNFT.target);

        // –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ NFT
        console.log("\nüéØ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
        const inviteCode = generateInviteCode();
        console.log("üé´ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥:", inviteCode);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let imagePath;
        try {
            imagePath = await createInviteImage(inviteCode);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if (!fs.existsSync(imagePath)) {
                throw new Error("–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω");
            }
            
            const fileStats = fs.statSync(imagePath);
            console.log("\nüì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:");
            console.log("- –ü—É—Ç—å:", imagePath);
            console.log("- –†–∞–∑–ºÔøΩÔøΩ:", (fileStats.size / 1024).toFixed(2), "KB");
            console.log("- –°–æ–∑–¥–∞–Ω–æ:", fileStats.birthtime);
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:");
            console.error(error.message);
            throw error;
        }

        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ IPFS
        console.log("\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Pinata IPFS...");
        console.log("\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Pinata IPFS...");
        
        let ipfsHash;
        try {
            const pinataResponse = await uploadToPinata(imagePath);
            ipfsHash = pinataResponse.IpfsHash;
            console.log("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ IPFS");
            console.log("IPFS Hash:", ipfsHash);
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ IPFS:");
            console.error(error);
            throw error;
        }

        // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        try {
            if (imagePath && fs.existsSync(imagePath)) {
                fs.unlinkSync(imagePath);
                console.log("\nüßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—á–∏—â–µ–Ω:", imagePath);
            }
        } catch (error) {
            console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:", error.message);
        }

        // –í—Ä–µ–º–µ–Ω–Ω—ã–π URI –¥–ª—è —Ç–µ—Å—Ç–∞
        const tempTokenUri = "ipfs://your-token-uri";

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç
        console.log("\n‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");
        const tx = await inviteNFT.mintInvite(
            deployer.address, 
            inviteCode, 
            tempTokenUri
        );
        console.log("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");
        const receipt = await tx.wait();
        
        // –ü–æ–ª—É—á–∞–µ–º tokenId –∏–∑ —Å–æ–±—ã—Ç–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const transferEvent = receipt.logs[0]; // –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–≥–¥–∞ Transfer –ø—Ä–∏ –º–∏–Ω—Ç–∏–Ω–≥–µ
        const tokenId = parseInt(transferEvent.topics[3], 16); // TokenId –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç—Ä–µ—Ç—å–µ–º —Ç–æ–ø–∏–∫–µ
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–∞–∑–∞ –≤ POL
        const gasPrice = receipt.gasPrice;
        const gasCostWei = gasPrice * receipt.gasUsed;
        const gasCostPOL = ethers.formatEther(gasCostWei);

        console.log("\n‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç:");
        console.log("–ö–æ–¥:", inviteCode);
        console.log("Token ID:", tokenId);
        console.log("Tx Hash:", receipt.hash);
        console.log("Block:", receipt.blockNumber);
        console.log("Gas Used:", receipt.gasUsed.toString());
        console.log("–°—Ç–æ–∏–º–æ—Å—Ç—å –≥–∞–∑–∞:", gasCostPOL, "POL");
        console.log("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", `https://gateway.pinata.cloud/ipfs/${ipfsHash}`);

        // –î–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        console.log("\nüîê –®–∞–≥ 2: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞");
        try {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
            const testWallet = ethers.Wallet.createRandom();
            console.log("\n‚ú® –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫:");
            console.log("üì´ –ê–¥—Ä–µ—Å:", testWallet.address);
            console.log("üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:", testWallet.privateKey);
            
            // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∫ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
            const VERIFICATION_MESSAGE = "Verify wallet for Estonians888InviteNFT";
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
            const messageHash = ethers.keccak256(
                ethers.solidityPacked(
                    ["string", "address"],
                    [VERIFICATION_MESSAGE, testWallet.address]
                )
            );
            
            console.log("\nüìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∏");
            console.log("–°–æ–æ–±—â–µ–Ω–∏–µ:", VERIFICATION_MESSAGE);
            console.log("–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:", testWallet.address);
            console.log("–•—ç—à –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:", messageHash);
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const signature = await testWallet.signMessage(
                ethers.getBytes(messageHash)
            );
            console.log("\n‚úçÔ∏è –ü–æ–¥–ø–∏—Å—å –ø–æ–ª—É—á–µ–Ω–∞:", signature);
            console.log("–î–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏:", signature.length, "–±–∞–π—Ç");
            
            // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            console.log("\nüîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ");
            console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é verifyWallet —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:");
            console.log("- wallet:", testWallet.address);
            console.log("- signature:", signature);
            
            const verifyTx = await inviteNFT.verifyWallet(testWallet.address, signature);
            console.log("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...");
            const verifyReceipt = await verifyTx.wait();
            
            console.log("\n‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:");
            console.log("Tx Hash:", verifyReceipt.hash);
            console.log("Block:", verifyReceipt.blockNumber);
            console.log("Gas Used:", verifyReceipt.gasUsed.toString());
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const isVerified = await inviteNFT.isWalletVerified(testWallet.address);
            console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:");
            console.log("–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:", isVerified ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç");

        } catch (error) {
            console.error("\n‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:");
            console.error("–¢–∏–ø –æ—à–∏–±–∫–∏:", error.constructor.name);
            console.error("–°–æ–æ–±—â–µ–Ω–∏–µ:", error.message);
            if (error.data) {
                console.error("–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:", error.data);
            }
            if (error.transaction) {
                console.error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:", error.transaction);
            }
            throw error;
        }

        console.log("\n‚ú® –ü—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω");
    } catch (error) {
        console.error("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:");
        console.error("–°–æ–æ–±—â–µ–Ω–∏–µ:", error.message);
        if (error.data) {
            try {
                const decodedError = ethers.toUtf8String('0x' + error.data.slice(138));
                console.error("–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", decodedError);
            } catch (e) {
                console.error("–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:", error.data);
            }
        }
        process.exit(1);
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });
